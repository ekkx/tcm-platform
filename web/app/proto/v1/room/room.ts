// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.3
//   protoc               v5.29.3
// source: v1/room/room.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import {
  type CallOptions,
  ChannelCredentials,
  Client,
  type ClientOptions,
  type ClientUnaryCall,
  type handleUnaryCall,
  makeGenericClientConstructor,
  Metadata,
  type ServiceError,
  type UntypedServiceImplementation,
} from "@grpc/grpc-js";

export const protobufPackage = "room.v1";

export enum PianoType {
  PIANO_TYPE_UNSPECIFIED = 0,
  GRAND = 1,
  UPRIGHT = 2,
  NONE = 3,
  UNRECOGNIZED = -1,
}

export function pianoTypeFromJSON(object: any): PianoType {
  switch (object) {
    case 0:
    case "PIANO_TYPE_UNSPECIFIED":
      return PianoType.PIANO_TYPE_UNSPECIFIED;
    case 1:
    case "GRAND":
      return PianoType.GRAND;
    case 2:
    case "UPRIGHT":
      return PianoType.UPRIGHT;
    case 3:
    case "NONE":
      return PianoType.NONE;
    case -1:
    case "UNRECOGNIZED":
    default:
      return PianoType.UNRECOGNIZED;
  }
}

export function pianoTypeToJSON(object: PianoType): string {
  switch (object) {
    case PianoType.PIANO_TYPE_UNSPECIFIED:
      return "PIANO_TYPE_UNSPECIFIED";
    case PianoType.GRAND:
      return "GRAND";
    case PianoType.UPRIGHT:
      return "UPRIGHT";
    case PianoType.NONE:
      return "NONE";
    case PianoType.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

export enum CampusType {
  CAMPUS_UNSPECIFIED = 0,
  NAKAMEGURO = 1,
  IKEBUKURO = 2,
  UNRECOGNIZED = -1,
}

export function campusTypeFromJSON(object: any): CampusType {
  switch (object) {
    case 0:
    case "CAMPUS_UNSPECIFIED":
      return CampusType.CAMPUS_UNSPECIFIED;
    case 1:
    case "NAKAMEGURO":
      return CampusType.NAKAMEGURO;
    case 2:
    case "IKEBUKURO":
      return CampusType.IKEBUKURO;
    case -1:
    case "UNRECOGNIZED":
    default:
      return CampusType.UNRECOGNIZED;
  }
}

export function campusTypeToJSON(object: CampusType): string {
  switch (object) {
    case CampusType.CAMPUS_UNSPECIFIED:
      return "CAMPUS_UNSPECIFIED";
    case CampusType.NAKAMEGURO:
      return "NAKAMEGURO";
    case CampusType.IKEBUKURO:
      return "IKEBUKURO";
    case CampusType.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

export interface Room {
  id: string;
  name: string;
  pianoType: PianoType;
  pianoNumber: number;
  isClassroom: boolean;
  isBasement: boolean;
  campusType: CampusType;
  floor: number;
}

export interface GetRoomsRequest {
}

export interface GetRoomsReply {
  rooms: Room[];
}

function createBaseRoom(): Room {
  return {
    id: "",
    name: "",
    pianoType: 0,
    pianoNumber: 0,
    isClassroom: false,
    isBasement: false,
    campusType: 0,
    floor: 0,
  };
}

export const Room: MessageFns<Room> = {
  encode(message: Room, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    if (message.name !== "") {
      writer.uint32(18).string(message.name);
    }
    if (message.pianoType !== 0) {
      writer.uint32(24).int32(message.pianoType);
    }
    if (message.pianoNumber !== 0) {
      writer.uint32(32).int32(message.pianoNumber);
    }
    if (message.isClassroom !== false) {
      writer.uint32(40).bool(message.isClassroom);
    }
    if (message.isBasement !== false) {
      writer.uint32(48).bool(message.isBasement);
    }
    if (message.campusType !== 0) {
      writer.uint32(56).int32(message.campusType);
    }
    if (message.floor !== 0) {
      writer.uint32(64).int32(message.floor);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Room {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRoom();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.name = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.pianoType = reader.int32() as any;
          continue;
        }
        case 4: {
          if (tag !== 32) {
            break;
          }

          message.pianoNumber = reader.int32();
          continue;
        }
        case 5: {
          if (tag !== 40) {
            break;
          }

          message.isClassroom = reader.bool();
          continue;
        }
        case 6: {
          if (tag !== 48) {
            break;
          }

          message.isBasement = reader.bool();
          continue;
        }
        case 7: {
          if (tag !== 56) {
            break;
          }

          message.campusType = reader.int32() as any;
          continue;
        }
        case 8: {
          if (tag !== 64) {
            break;
          }

          message.floor = reader.int32();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Room {
    return {
      id: isSet(object.id) ? globalThis.String(object.id) : "",
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      pianoType: isSet(object.pianoType) ? pianoTypeFromJSON(object.pianoType) : 0,
      pianoNumber: isSet(object.pianoNumber) ? globalThis.Number(object.pianoNumber) : 0,
      isClassroom: isSet(object.isClassroom) ? globalThis.Boolean(object.isClassroom) : false,
      isBasement: isSet(object.isBasement) ? globalThis.Boolean(object.isBasement) : false,
      campusType: isSet(object.campusType) ? campusTypeFromJSON(object.campusType) : 0,
      floor: isSet(object.floor) ? globalThis.Number(object.floor) : 0,
    };
  },

  toJSON(message: Room): unknown {
    const obj: any = {};
    if (message.id !== "") {
      obj.id = message.id;
    }
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.pianoType !== 0) {
      obj.pianoType = pianoTypeToJSON(message.pianoType);
    }
    if (message.pianoNumber !== 0) {
      obj.pianoNumber = Math.round(message.pianoNumber);
    }
    if (message.isClassroom !== false) {
      obj.isClassroom = message.isClassroom;
    }
    if (message.isBasement !== false) {
      obj.isBasement = message.isBasement;
    }
    if (message.campusType !== 0) {
      obj.campusType = campusTypeToJSON(message.campusType);
    }
    if (message.floor !== 0) {
      obj.floor = Math.round(message.floor);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Room>, I>>(base?: I): Room {
    return Room.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Room>, I>>(object: I): Room {
    const message = createBaseRoom();
    message.id = object.id ?? "";
    message.name = object.name ?? "";
    message.pianoType = object.pianoType ?? 0;
    message.pianoNumber = object.pianoNumber ?? 0;
    message.isClassroom = object.isClassroom ?? false;
    message.isBasement = object.isBasement ?? false;
    message.campusType = object.campusType ?? 0;
    message.floor = object.floor ?? 0;
    return message;
  },
};

function createBaseGetRoomsRequest(): GetRoomsRequest {
  return {};
}

export const GetRoomsRequest: MessageFns<GetRoomsRequest> = {
  encode(_: GetRoomsRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetRoomsRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetRoomsRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): GetRoomsRequest {
    return {};
  },

  toJSON(_: GetRoomsRequest): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<GetRoomsRequest>, I>>(base?: I): GetRoomsRequest {
    return GetRoomsRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GetRoomsRequest>, I>>(_: I): GetRoomsRequest {
    const message = createBaseGetRoomsRequest();
    return message;
  },
};

function createBaseGetRoomsReply(): GetRoomsReply {
  return { rooms: [] };
}

export const GetRoomsReply: MessageFns<GetRoomsReply> = {
  encode(message: GetRoomsReply, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.rooms) {
      Room.encode(v!, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetRoomsReply {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetRoomsReply();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.rooms.push(Room.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetRoomsReply {
    return { rooms: globalThis.Array.isArray(object?.rooms) ? object.rooms.map((e: any) => Room.fromJSON(e)) : [] };
  },

  toJSON(message: GetRoomsReply): unknown {
    const obj: any = {};
    if (message.rooms?.length) {
      obj.rooms = message.rooms.map((e) => Room.toJSON(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<GetRoomsReply>, I>>(base?: I): GetRoomsReply {
    return GetRoomsReply.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GetRoomsReply>, I>>(object: I): GetRoomsReply {
    const message = createBaseGetRoomsReply();
    message.rooms = object.rooms?.map((e) => Room.fromPartial(e)) || [];
    return message;
  },
};

export type RoomServiceService = typeof RoomServiceService;
export const RoomServiceService = {
  getRooms: {
    path: "/room.v1.RoomService/GetRooms",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: GetRoomsRequest): Buffer => Buffer.from(GetRoomsRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer): GetRoomsRequest => GetRoomsRequest.decode(value),
    responseSerialize: (value: GetRoomsReply): Buffer => Buffer.from(GetRoomsReply.encode(value).finish()),
    responseDeserialize: (value: Buffer): GetRoomsReply => GetRoomsReply.decode(value),
  },
} as const;

export interface RoomServiceServer extends UntypedServiceImplementation {
  getRooms: handleUnaryCall<GetRoomsRequest, GetRoomsReply>;
}

export interface RoomServiceClient extends Client {
  getRooms(
    request: GetRoomsRequest,
    callback: (error: ServiceError | null, response: GetRoomsReply) => void,
  ): ClientUnaryCall;
  getRooms(
    request: GetRoomsRequest,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: GetRoomsReply) => void,
  ): ClientUnaryCall;
  getRooms(
    request: GetRoomsRequest,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: GetRoomsReply) => void,
  ): ClientUnaryCall;
}

export const RoomServiceClient = makeGenericClientConstructor(RoomServiceService, "room.v1.RoomService") as unknown as {
  new (address: string, credentials: ChannelCredentials, options?: Partial<ClientOptions>): RoomServiceClient;
  service: typeof RoomServiceService;
  serviceName: string;
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
