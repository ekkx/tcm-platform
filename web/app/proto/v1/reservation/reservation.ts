// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.3
//   protoc               v5.29.3
// source: v1/reservation/reservation.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import {
  type CallOptions,
  ChannelCredentials,
  Client,
  type ClientOptions,
  type ClientUnaryCall,
  type handleUnaryCall,
  makeGenericClientConstructor,
  Metadata,
  type ServiceError,
  type UntypedServiceImplementation,
} from "@grpc/grpc-js";
import { Timestamp } from "../../google/protobuf/timestamp";
import { CampusType, campusTypeFromJSON, campusTypeToJSON } from "../room/room";

export const protobufPackage = "reservation.v1";

export interface Reservation {
  id: number;
  externalId?: string | undefined;
  campusType: CampusType;
  date: Date | undefined;
  roomId: string;
  fromHour: number;
  fromMinute: number;
  toHour: number;
  toMinute: number;
  bookerName?: string | undefined;
  createdAt: Date | undefined;
}

export interface GetReservationRequest {
  reservationId: number;
}

export interface GetReservationReply {
  reservation: Reservation | undefined;
}

export interface GetUserReservationsRequest {
  fromDate?: Date | undefined;
}

export interface GetUserReservationsReply {
  reservations: Reservation[];
}

export interface ReservationInput {
  campusType: CampusType;
  date: Date | undefined;
  fromHour: number;
  fromMinute: number;
  toHour: number;
  toMinute: number;
  roomId: string;
  bookerName?: string | undefined;
}

export interface CreateReservationRequest {
  reservation: ReservationInput | undefined;
}

export interface CreateReservationReply {
  reservations: Reservation[];
}

export interface UpdateReservationRequest {
  reservationId: number;
  reservation: ReservationInput | undefined;
}

export interface UpdateReservationReply {
  reservation: Reservation | undefined;
}

export interface DeleteReservationRequest {
  reservationId: number;
}

export interface DeleteReservationReply {
}

function createBaseReservation(): Reservation {
  return {
    id: 0,
    externalId: undefined,
    campusType: 0,
    date: undefined,
    roomId: "",
    fromHour: 0,
    fromMinute: 0,
    toHour: 0,
    toMinute: 0,
    bookerName: undefined,
    createdAt: undefined,
  };
}

export const Reservation: MessageFns<Reservation> = {
  encode(message: Reservation, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== 0) {
      writer.uint32(8).int64(message.id);
    }
    if (message.externalId !== undefined) {
      writer.uint32(18).string(message.externalId);
    }
    if (message.campusType !== 0) {
      writer.uint32(24).int32(message.campusType);
    }
    if (message.date !== undefined) {
      Timestamp.encode(toTimestamp(message.date), writer.uint32(34).fork()).join();
    }
    if (message.roomId !== "") {
      writer.uint32(42).string(message.roomId);
    }
    if (message.fromHour !== 0) {
      writer.uint32(48).int32(message.fromHour);
    }
    if (message.fromMinute !== 0) {
      writer.uint32(56).int32(message.fromMinute);
    }
    if (message.toHour !== 0) {
      writer.uint32(64).int32(message.toHour);
    }
    if (message.toMinute !== 0) {
      writer.uint32(72).int32(message.toMinute);
    }
    if (message.bookerName !== undefined) {
      writer.uint32(82).string(message.bookerName);
    }
    if (message.createdAt !== undefined) {
      Timestamp.encode(toTimestamp(message.createdAt), writer.uint32(90).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Reservation {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseReservation();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.id = longToNumber(reader.int64());
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.externalId = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.campusType = reader.int32() as any;
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.date = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.roomId = reader.string();
          continue;
        }
        case 6: {
          if (tag !== 48) {
            break;
          }

          message.fromHour = reader.int32();
          continue;
        }
        case 7: {
          if (tag !== 56) {
            break;
          }

          message.fromMinute = reader.int32();
          continue;
        }
        case 8: {
          if (tag !== 64) {
            break;
          }

          message.toHour = reader.int32();
          continue;
        }
        case 9: {
          if (tag !== 72) {
            break;
          }

          message.toMinute = reader.int32();
          continue;
        }
        case 10: {
          if (tag !== 82) {
            break;
          }

          message.bookerName = reader.string();
          continue;
        }
        case 11: {
          if (tag !== 90) {
            break;
          }

          message.createdAt = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Reservation {
    return {
      id: isSet(object.id) ? globalThis.Number(object.id) : 0,
      externalId: isSet(object.externalId) ? globalThis.String(object.externalId) : undefined,
      campusType: isSet(object.campusType) ? campusTypeFromJSON(object.campusType) : 0,
      date: isSet(object.date) ? fromJsonTimestamp(object.date) : undefined,
      roomId: isSet(object.roomId) ? globalThis.String(object.roomId) : "",
      fromHour: isSet(object.fromHour) ? globalThis.Number(object.fromHour) : 0,
      fromMinute: isSet(object.fromMinute) ? globalThis.Number(object.fromMinute) : 0,
      toHour: isSet(object.toHour) ? globalThis.Number(object.toHour) : 0,
      toMinute: isSet(object.toMinute) ? globalThis.Number(object.toMinute) : 0,
      bookerName: isSet(object.bookerName) ? globalThis.String(object.bookerName) : undefined,
      createdAt: isSet(object.createdAt) ? fromJsonTimestamp(object.createdAt) : undefined,
    };
  },

  toJSON(message: Reservation): unknown {
    const obj: any = {};
    if (message.id !== 0) {
      obj.id = Math.round(message.id);
    }
    if (message.externalId !== undefined) {
      obj.externalId = message.externalId;
    }
    if (message.campusType !== 0) {
      obj.campusType = campusTypeToJSON(message.campusType);
    }
    if (message.date !== undefined) {
      obj.date = message.date.toISOString();
    }
    if (message.roomId !== "") {
      obj.roomId = message.roomId;
    }
    if (message.fromHour !== 0) {
      obj.fromHour = Math.round(message.fromHour);
    }
    if (message.fromMinute !== 0) {
      obj.fromMinute = Math.round(message.fromMinute);
    }
    if (message.toHour !== 0) {
      obj.toHour = Math.round(message.toHour);
    }
    if (message.toMinute !== 0) {
      obj.toMinute = Math.round(message.toMinute);
    }
    if (message.bookerName !== undefined) {
      obj.bookerName = message.bookerName;
    }
    if (message.createdAt !== undefined) {
      obj.createdAt = message.createdAt.toISOString();
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Reservation>, I>>(base?: I): Reservation {
    return Reservation.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Reservation>, I>>(object: I): Reservation {
    const message = createBaseReservation();
    message.id = object.id ?? 0;
    message.externalId = object.externalId ?? undefined;
    message.campusType = object.campusType ?? 0;
    message.date = object.date ?? undefined;
    message.roomId = object.roomId ?? "";
    message.fromHour = object.fromHour ?? 0;
    message.fromMinute = object.fromMinute ?? 0;
    message.toHour = object.toHour ?? 0;
    message.toMinute = object.toMinute ?? 0;
    message.bookerName = object.bookerName ?? undefined;
    message.createdAt = object.createdAt ?? undefined;
    return message;
  },
};

function createBaseGetReservationRequest(): GetReservationRequest {
  return { reservationId: 0 };
}

export const GetReservationRequest: MessageFns<GetReservationRequest> = {
  encode(message: GetReservationRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.reservationId !== 0) {
      writer.uint32(8).int64(message.reservationId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetReservationRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetReservationRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.reservationId = longToNumber(reader.int64());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetReservationRequest {
    return { reservationId: isSet(object.reservationId) ? globalThis.Number(object.reservationId) : 0 };
  },

  toJSON(message: GetReservationRequest): unknown {
    const obj: any = {};
    if (message.reservationId !== 0) {
      obj.reservationId = Math.round(message.reservationId);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<GetReservationRequest>, I>>(base?: I): GetReservationRequest {
    return GetReservationRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GetReservationRequest>, I>>(object: I): GetReservationRequest {
    const message = createBaseGetReservationRequest();
    message.reservationId = object.reservationId ?? 0;
    return message;
  },
};

function createBaseGetReservationReply(): GetReservationReply {
  return { reservation: undefined };
}

export const GetReservationReply: MessageFns<GetReservationReply> = {
  encode(message: GetReservationReply, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.reservation !== undefined) {
      Reservation.encode(message.reservation, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetReservationReply {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetReservationReply();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.reservation = Reservation.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetReservationReply {
    return { reservation: isSet(object.reservation) ? Reservation.fromJSON(object.reservation) : undefined };
  },

  toJSON(message: GetReservationReply): unknown {
    const obj: any = {};
    if (message.reservation !== undefined) {
      obj.reservation = Reservation.toJSON(message.reservation);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<GetReservationReply>, I>>(base?: I): GetReservationReply {
    return GetReservationReply.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GetReservationReply>, I>>(object: I): GetReservationReply {
    const message = createBaseGetReservationReply();
    message.reservation = (object.reservation !== undefined && object.reservation !== null)
      ? Reservation.fromPartial(object.reservation)
      : undefined;
    return message;
  },
};

function createBaseGetUserReservationsRequest(): GetUserReservationsRequest {
  return { fromDate: undefined };
}

export const GetUserReservationsRequest: MessageFns<GetUserReservationsRequest> = {
  encode(message: GetUserReservationsRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.fromDate !== undefined) {
      Timestamp.encode(toTimestamp(message.fromDate), writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetUserReservationsRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetUserReservationsRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.fromDate = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetUserReservationsRequest {
    return { fromDate: isSet(object.fromDate) ? fromJsonTimestamp(object.fromDate) : undefined };
  },

  toJSON(message: GetUserReservationsRequest): unknown {
    const obj: any = {};
    if (message.fromDate !== undefined) {
      obj.fromDate = message.fromDate.toISOString();
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<GetUserReservationsRequest>, I>>(base?: I): GetUserReservationsRequest {
    return GetUserReservationsRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GetUserReservationsRequest>, I>>(object: I): GetUserReservationsRequest {
    const message = createBaseGetUserReservationsRequest();
    message.fromDate = object.fromDate ?? undefined;
    return message;
  },
};

function createBaseGetUserReservationsReply(): GetUserReservationsReply {
  return { reservations: [] };
}

export const GetUserReservationsReply: MessageFns<GetUserReservationsReply> = {
  encode(message: GetUserReservationsReply, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.reservations) {
      Reservation.encode(v!, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetUserReservationsReply {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetUserReservationsReply();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.reservations.push(Reservation.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetUserReservationsReply {
    return {
      reservations: globalThis.Array.isArray(object?.reservations)
        ? object.reservations.map((e: any) => Reservation.fromJSON(e))
        : [],
    };
  },

  toJSON(message: GetUserReservationsReply): unknown {
    const obj: any = {};
    if (message.reservations?.length) {
      obj.reservations = message.reservations.map((e) => Reservation.toJSON(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<GetUserReservationsReply>, I>>(base?: I): GetUserReservationsReply {
    return GetUserReservationsReply.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GetUserReservationsReply>, I>>(object: I): GetUserReservationsReply {
    const message = createBaseGetUserReservationsReply();
    message.reservations = object.reservations?.map((e) => Reservation.fromPartial(e)) || [];
    return message;
  },
};

function createBaseReservationInput(): ReservationInput {
  return {
    campusType: 0,
    date: undefined,
    fromHour: 0,
    fromMinute: 0,
    toHour: 0,
    toMinute: 0,
    roomId: "",
    bookerName: undefined,
  };
}

export const ReservationInput: MessageFns<ReservationInput> = {
  encode(message: ReservationInput, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.campusType !== 0) {
      writer.uint32(8).int32(message.campusType);
    }
    if (message.date !== undefined) {
      Timestamp.encode(toTimestamp(message.date), writer.uint32(18).fork()).join();
    }
    if (message.fromHour !== 0) {
      writer.uint32(24).int32(message.fromHour);
    }
    if (message.fromMinute !== 0) {
      writer.uint32(32).int32(message.fromMinute);
    }
    if (message.toHour !== 0) {
      writer.uint32(40).int32(message.toHour);
    }
    if (message.toMinute !== 0) {
      writer.uint32(48).int32(message.toMinute);
    }
    if (message.roomId !== "") {
      writer.uint32(66).string(message.roomId);
    }
    if (message.bookerName !== undefined) {
      writer.uint32(74).string(message.bookerName);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ReservationInput {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseReservationInput();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.campusType = reader.int32() as any;
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.date = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.fromHour = reader.int32();
          continue;
        }
        case 4: {
          if (tag !== 32) {
            break;
          }

          message.fromMinute = reader.int32();
          continue;
        }
        case 5: {
          if (tag !== 40) {
            break;
          }

          message.toHour = reader.int32();
          continue;
        }
        case 6: {
          if (tag !== 48) {
            break;
          }

          message.toMinute = reader.int32();
          continue;
        }
        case 8: {
          if (tag !== 66) {
            break;
          }

          message.roomId = reader.string();
          continue;
        }
        case 9: {
          if (tag !== 74) {
            break;
          }

          message.bookerName = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ReservationInput {
    return {
      campusType: isSet(object.campusType) ? campusTypeFromJSON(object.campusType) : 0,
      date: isSet(object.date) ? fromJsonTimestamp(object.date) : undefined,
      fromHour: isSet(object.fromHour) ? globalThis.Number(object.fromHour) : 0,
      fromMinute: isSet(object.fromMinute) ? globalThis.Number(object.fromMinute) : 0,
      toHour: isSet(object.toHour) ? globalThis.Number(object.toHour) : 0,
      toMinute: isSet(object.toMinute) ? globalThis.Number(object.toMinute) : 0,
      roomId: isSet(object.roomId) ? globalThis.String(object.roomId) : "",
      bookerName: isSet(object.bookerName) ? globalThis.String(object.bookerName) : undefined,
    };
  },

  toJSON(message: ReservationInput): unknown {
    const obj: any = {};
    if (message.campusType !== 0) {
      obj.campusType = campusTypeToJSON(message.campusType);
    }
    if (message.date !== undefined) {
      obj.date = message.date.toISOString();
    }
    if (message.fromHour !== 0) {
      obj.fromHour = Math.round(message.fromHour);
    }
    if (message.fromMinute !== 0) {
      obj.fromMinute = Math.round(message.fromMinute);
    }
    if (message.toHour !== 0) {
      obj.toHour = Math.round(message.toHour);
    }
    if (message.toMinute !== 0) {
      obj.toMinute = Math.round(message.toMinute);
    }
    if (message.roomId !== "") {
      obj.roomId = message.roomId;
    }
    if (message.bookerName !== undefined) {
      obj.bookerName = message.bookerName;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ReservationInput>, I>>(base?: I): ReservationInput {
    return ReservationInput.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ReservationInput>, I>>(object: I): ReservationInput {
    const message = createBaseReservationInput();
    message.campusType = object.campusType ?? 0;
    message.date = object.date ?? undefined;
    message.fromHour = object.fromHour ?? 0;
    message.fromMinute = object.fromMinute ?? 0;
    message.toHour = object.toHour ?? 0;
    message.toMinute = object.toMinute ?? 0;
    message.roomId = object.roomId ?? "";
    message.bookerName = object.bookerName ?? undefined;
    return message;
  },
};

function createBaseCreateReservationRequest(): CreateReservationRequest {
  return { reservation: undefined };
}

export const CreateReservationRequest: MessageFns<CreateReservationRequest> = {
  encode(message: CreateReservationRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.reservation !== undefined) {
      ReservationInput.encode(message.reservation, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CreateReservationRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCreateReservationRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.reservation = ReservationInput.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CreateReservationRequest {
    return { reservation: isSet(object.reservation) ? ReservationInput.fromJSON(object.reservation) : undefined };
  },

  toJSON(message: CreateReservationRequest): unknown {
    const obj: any = {};
    if (message.reservation !== undefined) {
      obj.reservation = ReservationInput.toJSON(message.reservation);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<CreateReservationRequest>, I>>(base?: I): CreateReservationRequest {
    return CreateReservationRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<CreateReservationRequest>, I>>(object: I): CreateReservationRequest {
    const message = createBaseCreateReservationRequest();
    message.reservation = (object.reservation !== undefined && object.reservation !== null)
      ? ReservationInput.fromPartial(object.reservation)
      : undefined;
    return message;
  },
};

function createBaseCreateReservationReply(): CreateReservationReply {
  return { reservations: [] };
}

export const CreateReservationReply: MessageFns<CreateReservationReply> = {
  encode(message: CreateReservationReply, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.reservations) {
      Reservation.encode(v!, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CreateReservationReply {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCreateReservationReply();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.reservations.push(Reservation.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CreateReservationReply {
    return {
      reservations: globalThis.Array.isArray(object?.reservations)
        ? object.reservations.map((e: any) => Reservation.fromJSON(e))
        : [],
    };
  },

  toJSON(message: CreateReservationReply): unknown {
    const obj: any = {};
    if (message.reservations?.length) {
      obj.reservations = message.reservations.map((e) => Reservation.toJSON(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<CreateReservationReply>, I>>(base?: I): CreateReservationReply {
    return CreateReservationReply.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<CreateReservationReply>, I>>(object: I): CreateReservationReply {
    const message = createBaseCreateReservationReply();
    message.reservations = object.reservations?.map((e) => Reservation.fromPartial(e)) || [];
    return message;
  },
};

function createBaseUpdateReservationRequest(): UpdateReservationRequest {
  return { reservationId: 0, reservation: undefined };
}

export const UpdateReservationRequest: MessageFns<UpdateReservationRequest> = {
  encode(message: UpdateReservationRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.reservationId !== 0) {
      writer.uint32(8).int64(message.reservationId);
    }
    if (message.reservation !== undefined) {
      ReservationInput.encode(message.reservation, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UpdateReservationRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdateReservationRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.reservationId = longToNumber(reader.int64());
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.reservation = ReservationInput.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UpdateReservationRequest {
    return {
      reservationId: isSet(object.reservationId) ? globalThis.Number(object.reservationId) : 0,
      reservation: isSet(object.reservation) ? ReservationInput.fromJSON(object.reservation) : undefined,
    };
  },

  toJSON(message: UpdateReservationRequest): unknown {
    const obj: any = {};
    if (message.reservationId !== 0) {
      obj.reservationId = Math.round(message.reservationId);
    }
    if (message.reservation !== undefined) {
      obj.reservation = ReservationInput.toJSON(message.reservation);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<UpdateReservationRequest>, I>>(base?: I): UpdateReservationRequest {
    return UpdateReservationRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<UpdateReservationRequest>, I>>(object: I): UpdateReservationRequest {
    const message = createBaseUpdateReservationRequest();
    message.reservationId = object.reservationId ?? 0;
    message.reservation = (object.reservation !== undefined && object.reservation !== null)
      ? ReservationInput.fromPartial(object.reservation)
      : undefined;
    return message;
  },
};

function createBaseUpdateReservationReply(): UpdateReservationReply {
  return { reservation: undefined };
}

export const UpdateReservationReply: MessageFns<UpdateReservationReply> = {
  encode(message: UpdateReservationReply, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.reservation !== undefined) {
      Reservation.encode(message.reservation, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UpdateReservationReply {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdateReservationReply();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.reservation = Reservation.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UpdateReservationReply {
    return { reservation: isSet(object.reservation) ? Reservation.fromJSON(object.reservation) : undefined };
  },

  toJSON(message: UpdateReservationReply): unknown {
    const obj: any = {};
    if (message.reservation !== undefined) {
      obj.reservation = Reservation.toJSON(message.reservation);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<UpdateReservationReply>, I>>(base?: I): UpdateReservationReply {
    return UpdateReservationReply.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<UpdateReservationReply>, I>>(object: I): UpdateReservationReply {
    const message = createBaseUpdateReservationReply();
    message.reservation = (object.reservation !== undefined && object.reservation !== null)
      ? Reservation.fromPartial(object.reservation)
      : undefined;
    return message;
  },
};

function createBaseDeleteReservationRequest(): DeleteReservationRequest {
  return { reservationId: 0 };
}

export const DeleteReservationRequest: MessageFns<DeleteReservationRequest> = {
  encode(message: DeleteReservationRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.reservationId !== 0) {
      writer.uint32(8).int64(message.reservationId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DeleteReservationRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDeleteReservationRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.reservationId = longToNumber(reader.int64());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DeleteReservationRequest {
    return { reservationId: isSet(object.reservationId) ? globalThis.Number(object.reservationId) : 0 };
  },

  toJSON(message: DeleteReservationRequest): unknown {
    const obj: any = {};
    if (message.reservationId !== 0) {
      obj.reservationId = Math.round(message.reservationId);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<DeleteReservationRequest>, I>>(base?: I): DeleteReservationRequest {
    return DeleteReservationRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<DeleteReservationRequest>, I>>(object: I): DeleteReservationRequest {
    const message = createBaseDeleteReservationRequest();
    message.reservationId = object.reservationId ?? 0;
    return message;
  },
};

function createBaseDeleteReservationReply(): DeleteReservationReply {
  return {};
}

export const DeleteReservationReply: MessageFns<DeleteReservationReply> = {
  encode(_: DeleteReservationReply, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DeleteReservationReply {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDeleteReservationReply();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): DeleteReservationReply {
    return {};
  },

  toJSON(_: DeleteReservationReply): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<DeleteReservationReply>, I>>(base?: I): DeleteReservationReply {
    return DeleteReservationReply.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<DeleteReservationReply>, I>>(_: I): DeleteReservationReply {
    const message = createBaseDeleteReservationReply();
    return message;
  },
};

export type ReservationServiceService = typeof ReservationServiceService;
export const ReservationServiceService = {
  getReservation: {
    path: "/reservation.v1.ReservationService/GetReservation",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: GetReservationRequest): Buffer =>
      Buffer.from(GetReservationRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer): GetReservationRequest => GetReservationRequest.decode(value),
    responseSerialize: (value: GetReservationReply): Buffer => Buffer.from(GetReservationReply.encode(value).finish()),
    responseDeserialize: (value: Buffer): GetReservationReply => GetReservationReply.decode(value),
  },
  getMyReservations: {
    path: "/reservation.v1.ReservationService/GetMyReservations",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: GetUserReservationsRequest): Buffer =>
      Buffer.from(GetUserReservationsRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer): GetUserReservationsRequest => GetUserReservationsRequest.decode(value),
    responseSerialize: (value: GetUserReservationsReply): Buffer =>
      Buffer.from(GetUserReservationsReply.encode(value).finish()),
    responseDeserialize: (value: Buffer): GetUserReservationsReply => GetUserReservationsReply.decode(value),
  },
  createReservation: {
    path: "/reservation.v1.ReservationService/CreateReservation",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: CreateReservationRequest): Buffer =>
      Buffer.from(CreateReservationRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer): CreateReservationRequest => CreateReservationRequest.decode(value),
    responseSerialize: (value: CreateReservationReply): Buffer =>
      Buffer.from(CreateReservationReply.encode(value).finish()),
    responseDeserialize: (value: Buffer): CreateReservationReply => CreateReservationReply.decode(value),
  },
  updateReservation: {
    path: "/reservation.v1.ReservationService/UpdateReservation",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: UpdateReservationRequest): Buffer =>
      Buffer.from(UpdateReservationRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer): UpdateReservationRequest => UpdateReservationRequest.decode(value),
    responseSerialize: (value: UpdateReservationReply): Buffer =>
      Buffer.from(UpdateReservationReply.encode(value).finish()),
    responseDeserialize: (value: Buffer): UpdateReservationReply => UpdateReservationReply.decode(value),
  },
  deleteReservation: {
    path: "/reservation.v1.ReservationService/DeleteReservation",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: DeleteReservationRequest): Buffer =>
      Buffer.from(DeleteReservationRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer): DeleteReservationRequest => DeleteReservationRequest.decode(value),
    responseSerialize: (value: DeleteReservationReply): Buffer =>
      Buffer.from(DeleteReservationReply.encode(value).finish()),
    responseDeserialize: (value: Buffer): DeleteReservationReply => DeleteReservationReply.decode(value),
  },
} as const;

export interface ReservationServiceServer extends UntypedServiceImplementation {
  getReservation: handleUnaryCall<GetReservationRequest, GetReservationReply>;
  getMyReservations: handleUnaryCall<GetUserReservationsRequest, GetUserReservationsReply>;
  createReservation: handleUnaryCall<CreateReservationRequest, CreateReservationReply>;
  updateReservation: handleUnaryCall<UpdateReservationRequest, UpdateReservationReply>;
  deleteReservation: handleUnaryCall<DeleteReservationRequest, DeleteReservationReply>;
}

export interface ReservationServiceClient extends Client {
  getReservation(
    request: GetReservationRequest,
    callback: (error: ServiceError | null, response: GetReservationReply) => void,
  ): ClientUnaryCall;
  getReservation(
    request: GetReservationRequest,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: GetReservationReply) => void,
  ): ClientUnaryCall;
  getReservation(
    request: GetReservationRequest,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: GetReservationReply) => void,
  ): ClientUnaryCall;
  getMyReservations(
    request: GetUserReservationsRequest,
    callback: (error: ServiceError | null, response: GetUserReservationsReply) => void,
  ): ClientUnaryCall;
  getMyReservations(
    request: GetUserReservationsRequest,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: GetUserReservationsReply) => void,
  ): ClientUnaryCall;
  getMyReservations(
    request: GetUserReservationsRequest,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: GetUserReservationsReply) => void,
  ): ClientUnaryCall;
  createReservation(
    request: CreateReservationRequest,
    callback: (error: ServiceError | null, response: CreateReservationReply) => void,
  ): ClientUnaryCall;
  createReservation(
    request: CreateReservationRequest,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: CreateReservationReply) => void,
  ): ClientUnaryCall;
  createReservation(
    request: CreateReservationRequest,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: CreateReservationReply) => void,
  ): ClientUnaryCall;
  updateReservation(
    request: UpdateReservationRequest,
    callback: (error: ServiceError | null, response: UpdateReservationReply) => void,
  ): ClientUnaryCall;
  updateReservation(
    request: UpdateReservationRequest,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: UpdateReservationReply) => void,
  ): ClientUnaryCall;
  updateReservation(
    request: UpdateReservationRequest,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: UpdateReservationReply) => void,
  ): ClientUnaryCall;
  deleteReservation(
    request: DeleteReservationRequest,
    callback: (error: ServiceError | null, response: DeleteReservationReply) => void,
  ): ClientUnaryCall;
  deleteReservation(
    request: DeleteReservationRequest,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: DeleteReservationReply) => void,
  ): ClientUnaryCall;
  deleteReservation(
    request: DeleteReservationRequest,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: DeleteReservationReply) => void,
  ): ClientUnaryCall;
}

export const ReservationServiceClient = makeGenericClientConstructor(
  ReservationServiceService,
  "reservation.v1.ReservationService",
) as unknown as {
  new (address: string, credentials: ChannelCredentials, options?: Partial<ClientOptions>): ReservationServiceClient;
  service: typeof ReservationServiceService;
  serviceName: string;
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function toTimestamp(date: Date): Timestamp {
  const seconds = Math.trunc(date.getTime() / 1_000);
  const nanos = (date.getTime() % 1_000) * 1_000_000;
  return { seconds, nanos };
}

function fromTimestamp(t: Timestamp): Date {
  let millis = (t.seconds || 0) * 1_000;
  millis += (t.nanos || 0) / 1_000_000;
  return new globalThis.Date(millis);
}

function fromJsonTimestamp(o: any): Date {
  if (o instanceof globalThis.Date) {
    return o;
  } else if (typeof o === "string") {
    return new globalThis.Date(o);
  } else {
    return fromTimestamp(Timestamp.fromJSON(o));
  }
}

function longToNumber(int64: { toString(): string }): number {
  const num = globalThis.Number(int64.toString());
  if (num > globalThis.Number.MAX_SAFE_INTEGER) {
    throw new globalThis.Error("Value is larger than Number.MAX_SAFE_INTEGER");
  }
  if (num < globalThis.Number.MIN_SAFE_INTEGER) {
    throw new globalThis.Error("Value is smaller than Number.MIN_SAFE_INTEGER");
  }
  return num;
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
