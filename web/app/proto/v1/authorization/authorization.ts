// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.3
//   protoc               v5.29.3
// source: v1/authorization/authorization.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import {
  type CallOptions,
  ChannelCredentials,
  Client,
  type ClientOptions,
  type ClientUnaryCall,
  type handleUnaryCall,
  makeGenericClientConstructor,
  Metadata,
  type ServiceError,
  type UntypedServiceImplementation,
} from "@grpc/grpc-js";

export const protobufPackage = "authorization.v1";

export interface Authorization {
  accessToken: string;
  refreshToken: string;
}

export interface AuthorizeRequest {
  userId: string;
  password: string;
}

export interface AuthorizeReply {
  authorization: Authorization | undefined;
}

export interface ReauthorizeRequest {
  refreshToken: string;
}

export interface ReauthorizeReply {
  authorization: Authorization | undefined;
}

function createBaseAuthorization(): Authorization {
  return { accessToken: "", refreshToken: "" };
}

export const Authorization: MessageFns<Authorization> = {
  encode(message: Authorization, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.accessToken !== "") {
      writer.uint32(10).string(message.accessToken);
    }
    if (message.refreshToken !== "") {
      writer.uint32(18).string(message.refreshToken);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Authorization {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAuthorization();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.accessToken = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.refreshToken = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Authorization {
    return {
      accessToken: isSet(object.accessToken) ? globalThis.String(object.accessToken) : "",
      refreshToken: isSet(object.refreshToken) ? globalThis.String(object.refreshToken) : "",
    };
  },

  toJSON(message: Authorization): unknown {
    const obj: any = {};
    if (message.accessToken !== "") {
      obj.accessToken = message.accessToken;
    }
    if (message.refreshToken !== "") {
      obj.refreshToken = message.refreshToken;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Authorization>, I>>(base?: I): Authorization {
    return Authorization.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Authorization>, I>>(object: I): Authorization {
    const message = createBaseAuthorization();
    message.accessToken = object.accessToken ?? "";
    message.refreshToken = object.refreshToken ?? "";
    return message;
  },
};

function createBaseAuthorizeRequest(): AuthorizeRequest {
  return { userId: "", password: "" };
}

export const AuthorizeRequest: MessageFns<AuthorizeRequest> = {
  encode(message: AuthorizeRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.userId !== "") {
      writer.uint32(10).string(message.userId);
    }
    if (message.password !== "") {
      writer.uint32(18).string(message.password);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): AuthorizeRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAuthorizeRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.userId = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.password = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): AuthorizeRequest {
    return {
      userId: isSet(object.userId) ? globalThis.String(object.userId) : "",
      password: isSet(object.password) ? globalThis.String(object.password) : "",
    };
  },

  toJSON(message: AuthorizeRequest): unknown {
    const obj: any = {};
    if (message.userId !== "") {
      obj.userId = message.userId;
    }
    if (message.password !== "") {
      obj.password = message.password;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<AuthorizeRequest>, I>>(base?: I): AuthorizeRequest {
    return AuthorizeRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<AuthorizeRequest>, I>>(object: I): AuthorizeRequest {
    const message = createBaseAuthorizeRequest();
    message.userId = object.userId ?? "";
    message.password = object.password ?? "";
    return message;
  },
};

function createBaseAuthorizeReply(): AuthorizeReply {
  return { authorization: undefined };
}

export const AuthorizeReply: MessageFns<AuthorizeReply> = {
  encode(message: AuthorizeReply, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.authorization !== undefined) {
      Authorization.encode(message.authorization, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): AuthorizeReply {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAuthorizeReply();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.authorization = Authorization.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): AuthorizeReply {
    return { authorization: isSet(object.authorization) ? Authorization.fromJSON(object.authorization) : undefined };
  },

  toJSON(message: AuthorizeReply): unknown {
    const obj: any = {};
    if (message.authorization !== undefined) {
      obj.authorization = Authorization.toJSON(message.authorization);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<AuthorizeReply>, I>>(base?: I): AuthorizeReply {
    return AuthorizeReply.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<AuthorizeReply>, I>>(object: I): AuthorizeReply {
    const message = createBaseAuthorizeReply();
    message.authorization = (object.authorization !== undefined && object.authorization !== null)
      ? Authorization.fromPartial(object.authorization)
      : undefined;
    return message;
  },
};

function createBaseReauthorizeRequest(): ReauthorizeRequest {
  return { refreshToken: "" };
}

export const ReauthorizeRequest: MessageFns<ReauthorizeRequest> = {
  encode(message: ReauthorizeRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.refreshToken !== "") {
      writer.uint32(10).string(message.refreshToken);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ReauthorizeRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseReauthorizeRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.refreshToken = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ReauthorizeRequest {
    return { refreshToken: isSet(object.refreshToken) ? globalThis.String(object.refreshToken) : "" };
  },

  toJSON(message: ReauthorizeRequest): unknown {
    const obj: any = {};
    if (message.refreshToken !== "") {
      obj.refreshToken = message.refreshToken;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ReauthorizeRequest>, I>>(base?: I): ReauthorizeRequest {
    return ReauthorizeRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ReauthorizeRequest>, I>>(object: I): ReauthorizeRequest {
    const message = createBaseReauthorizeRequest();
    message.refreshToken = object.refreshToken ?? "";
    return message;
  },
};

function createBaseReauthorizeReply(): ReauthorizeReply {
  return { authorization: undefined };
}

export const ReauthorizeReply: MessageFns<ReauthorizeReply> = {
  encode(message: ReauthorizeReply, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.authorization !== undefined) {
      Authorization.encode(message.authorization, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ReauthorizeReply {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseReauthorizeReply();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.authorization = Authorization.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ReauthorizeReply {
    return { authorization: isSet(object.authorization) ? Authorization.fromJSON(object.authorization) : undefined };
  },

  toJSON(message: ReauthorizeReply): unknown {
    const obj: any = {};
    if (message.authorization !== undefined) {
      obj.authorization = Authorization.toJSON(message.authorization);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ReauthorizeReply>, I>>(base?: I): ReauthorizeReply {
    return ReauthorizeReply.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ReauthorizeReply>, I>>(object: I): ReauthorizeReply {
    const message = createBaseReauthorizeReply();
    message.authorization = (object.authorization !== undefined && object.authorization !== null)
      ? Authorization.fromPartial(object.authorization)
      : undefined;
    return message;
  },
};

export type AuthorizationServiceService = typeof AuthorizationServiceService;
export const AuthorizationServiceService = {
  authorize: {
    path: "/authorization.v1.AuthorizationService/Authorize",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: AuthorizeRequest): Buffer => Buffer.from(AuthorizeRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer): AuthorizeRequest => AuthorizeRequest.decode(value),
    responseSerialize: (value: AuthorizeReply): Buffer => Buffer.from(AuthorizeReply.encode(value).finish()),
    responseDeserialize: (value: Buffer): AuthorizeReply => AuthorizeReply.decode(value),
  },
  reauthorize: {
    path: "/authorization.v1.AuthorizationService/Reauthorize",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: ReauthorizeRequest): Buffer => Buffer.from(ReauthorizeRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer): ReauthorizeRequest => ReauthorizeRequest.decode(value),
    responseSerialize: (value: ReauthorizeReply): Buffer => Buffer.from(ReauthorizeReply.encode(value).finish()),
    responseDeserialize: (value: Buffer): ReauthorizeReply => ReauthorizeReply.decode(value),
  },
} as const;

export interface AuthorizationServiceServer extends UntypedServiceImplementation {
  authorize: handleUnaryCall<AuthorizeRequest, AuthorizeReply>;
  reauthorize: handleUnaryCall<ReauthorizeRequest, ReauthorizeReply>;
}

export interface AuthorizationServiceClient extends Client {
  authorize(
    request: AuthorizeRequest,
    callback: (error: ServiceError | null, response: AuthorizeReply) => void,
  ): ClientUnaryCall;
  authorize(
    request: AuthorizeRequest,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: AuthorizeReply) => void,
  ): ClientUnaryCall;
  authorize(
    request: AuthorizeRequest,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: AuthorizeReply) => void,
  ): ClientUnaryCall;
  reauthorize(
    request: ReauthorizeRequest,
    callback: (error: ServiceError | null, response: ReauthorizeReply) => void,
  ): ClientUnaryCall;
  reauthorize(
    request: ReauthorizeRequest,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: ReauthorizeReply) => void,
  ): ClientUnaryCall;
  reauthorize(
    request: ReauthorizeRequest,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: ReauthorizeReply) => void,
  ): ClientUnaryCall;
}

export const AuthorizationServiceClient = makeGenericClientConstructor(
  AuthorizationServiceService,
  "authorization.v1.AuthorizationService",
) as unknown as {
  new (address: string, credentials: ChannelCredentials, options?: Partial<ClientOptions>): AuthorizationServiceClient;
  service: typeof AuthorizationServiceService;
  serviceName: string;
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
