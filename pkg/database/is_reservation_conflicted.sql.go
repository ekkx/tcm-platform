// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: is_reservation_conflicted.sql

package database

import (
	"context"

	"github.com/ekkx/tcmrsv-web/pkg/ymd"
)

const isReservationConflicted = `-- name: IsReservationConflicted :one
SELECT EXISTS (
    SELECT
        1
    FROM
        reservations
    WHERE
        reservations.room_id = $1::TEXT
        AND reservations.date = $2::DATE
        AND (
            (($3 * 60) + $4) < ((reservations.to_hour * 60) + reservations.to_minute)
            AND (($5 * 60) + $6) > ((reservations.from_hour * 60) + reservations.from_minute)
        )
) AS conflict
`

type IsReservationConflictedParams struct {
	RoomID     string  `json:"room_id"`
	Date       ymd.YMD `json:"date"`
	FromHour   *int32  `json:"from_hour"`
	FromMinute *int32  `json:"from_minute"`
	ToHour     *int32  `json:"to_hour"`
	ToMinute   *int32  `json:"to_minute"`
}

func (q *Queries) IsReservationConflicted(ctx context.Context, arg IsReservationConflictedParams) (bool, error) {
	row := q.db.QueryRow(ctx, isReservationConflicted,
		arg.RoomID,
		arg.Date,
		arg.FromHour,
		arg.FromMinute,
		arg.ToHour,
		arg.ToMinute,
	)
	var conflict bool
	err := row.Scan(&conflict)
	return conflict, err
}
