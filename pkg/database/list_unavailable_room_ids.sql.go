// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: list_unavailable_room_ids.sql

package database

import (
	"context"

	"github.com/ekkx/tcmrsv-web/pkg/ymd"
)

const listUnavailableRoomIDs = `-- name: ListUnavailableRoomIDs :many
SELECT
    reservations.room_id
FROM
    reservations
WHERE
    reservations.campus_type = $1::campus_type
    AND reservations.date = $2::DATE
    AND (
        (reservations.from_hour * 60 + reservations.from_minute) < ($3::INT * 60 + $4::INT)
        AND (reservations.to_hour * 60 + reservations.to_minute) > ($5::INT * 60 + $6::INT)
    )
`

type ListUnavailableRoomIDsParams struct {
	CampusType CampusType `json:"campus_type"`
	Date       ymd.YMD    `json:"date"`
	ToHour     int32      `json:"to_hour"`
	ToMinute   int32      `json:"to_minute"`
	FromHour   int32      `json:"from_hour"`
	FromMinute int32      `json:"from_minute"`
}

func (q *Queries) ListUnavailableRoomIDs(ctx context.Context, arg ListUnavailableRoomIDsParams) ([]string, error) {
	rows, err := q.db.Query(ctx, listUnavailableRoomIDs,
		arg.CampusType,
		arg.Date,
		arg.ToHour,
		arg.ToMinute,
		arg.FromHour,
		arg.FromMinute,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []string{}
	for rows.Next() {
		var room_id string
		if err := rows.Scan(&room_id); err != nil {
			return nil, err
		}
		items = append(items, room_id)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
