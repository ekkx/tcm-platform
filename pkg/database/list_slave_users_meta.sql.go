// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: list_slave_users_meta.sql

package database

import (
	"context"

	"github.com/ekkx/tcmrsv-web/pkg/ulid"
)

const listSlaveUsersMeta = `-- name: ListSlaveUsersMeta :many
SELECT
    users.id as user_id,
    users.master_user_id as master_user_id
FROM
    users
WHERE
    users.master_user_id = $2::ulid
    AND (
        $3::ulid IS NULL
        OR users.id < $3::ulid
    )
ORDER BY
    users.id DESC
LIMIT
    $1
`

type ListSlaveUsersMetaParams struct {
	Limit        int64      `json:"limit"`
	MasterUserID ulid.ULID  `json:"master_user_id"`
	LastUserID   *ulid.ULID `json:"last_user_id"`
}

type ListSlaveUsersMetaRow struct {
	UserID       ulid.ULID  `json:"user_id"`
	MasterUserID *ulid.ULID `json:"master_user_id"`
}

func (q *Queries) ListSlaveUsersMeta(ctx context.Context, arg ListSlaveUsersMetaParams) ([]ListSlaveUsersMetaRow, error) {
	rows, err := q.db.Query(ctx, listSlaveUsersMeta, arg.Limit, arg.MasterUserID, arg.LastUserID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []ListSlaveUsersMetaRow{}
	for rows.Next() {
		var i ListSlaveUsersMetaRow
		if err := rows.Scan(&i.UserID, &i.MasterUserID); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
