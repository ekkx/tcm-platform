// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.3.0 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"context"
	"encoding/base64"
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"net/url"
	"path"
	"strings"
	"time"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
	"github.com/oapi-codegen/runtime"
)

const (
	BearerScopes = "bearer.Scopes"
)

// Defines values for ReservationCampusCode.
const (
	ReservationCampusCodeN1 ReservationCampusCode = "1"
	ReservationCampusCodeN2 ReservationCampusCode = "2"
)

// Defines values for RoomCampusCode.
const (
	RoomCampusCodeN1 RoomCampusCode = "1"
	RoomCampusCodeN2 RoomCampusCode = "2"
)

// Defines values for RoomPianoType.
const (
	RoomPianoTypeGrand   RoomPianoType = "grand"
	RoomPianoTypeNone    RoomPianoType = "none"
	RoomPianoTypeUpright RoomPianoType = "upright"
)

// Defines values for CreateReservationJSONBodyCampusCode.
const (
	CreateReservationJSONBodyCampusCodeN1 CreateReservationJSONBodyCampusCode = "1"
	CreateReservationJSONBodyCampusCodeN2 CreateReservationJSONBodyCampusCode = "2"
)

// Defines values for CreateReservationJSONBodyPianoTypes.
const (
	CreateReservationJSONBodyPianoTypesGrand   CreateReservationJSONBodyPianoTypes = "grand"
	CreateReservationJSONBodyPianoTypesNone    CreateReservationJSONBodyPianoTypes = "none"
	CreateReservationJSONBodyPianoTypesUpright CreateReservationJSONBodyPianoTypes = "upright"
)

// Defines values for UpdateReservationJSONBodyCampusCode.
const (
	UpdateReservationJSONBodyCampusCodeN1 UpdateReservationJSONBodyCampusCode = "1"
	UpdateReservationJSONBodyCampusCodeN2 UpdateReservationJSONBodyCampusCode = "2"
)

// Defines values for UpdateReservationJSONBodyPianoTypes.
const (
	Grand   UpdateReservationJSONBodyPianoTypes = "grand"
	None    UpdateReservationJSONBodyPianoTypes = "none"
	Upright UpdateReservationJSONBodyPianoTypes = "upright"
)

// Authorization defines model for Authorization.
type Authorization struct {
	AccessToken  string `json:"access_token"`
	RefreshToken string `json:"refresh_token"`
}

// Reservation defines model for Reservation.
type Reservation struct {
	BookerName *string               `json:"booker_name,omitempty"`
	CampusCode ReservationCampusCode `json:"campus_code"`
	CreatedAt  time.Time             `json:"created_at"`
	Date       time.Time             `json:"date"`
	ExternalId *string               `json:"external_id,omitempty"`
	FromHour   int                   `json:"from_hour"`
	FromMinute int                   `json:"from_minute"`
	Id         int                   `json:"id"`
	RoomId     string                `json:"room_id"`
	ToHour     int                   `json:"to_hour"`
	ToMinute   int                   `json:"to_minute"`
}

// ReservationCampusCode defines model for Reservation.CampusCode.
type ReservationCampusCode string

// ReservationList defines model for ReservationList.
type ReservationList struct {
	Reservations []Reservation `json:"reservations"`
}

// Response defines model for Response.
type Response struct {
	Code int                    `json:"code"`
	Data map[string]interface{} `json:"data"`
	Ok   bool                   `json:"ok"`
}

// Room defines model for Room.
type Room struct {
	CampusCode  RoomCampusCode `json:"campus_code"`
	Floor       float32        `json:"floor"`
	Id          string         `json:"id"`
	IsBasement  bool           `json:"is_basement"`
	IsClassroom bool           `json:"is_classroom"`
	Name        string         `json:"name"`
	PianoNumber int            `json:"piano_number"`
	PianoType   RoomPianoType  `json:"piano_type"`
}

// RoomCampusCode defines model for Room.CampusCode.
type RoomCampusCode string

// RoomPianoType defines model for Room.PianoType.
type RoomPianoType string

// RoomList defines model for RoomList.
type RoomList struct {
	Rooms []Room `json:"rooms"`
}

// AuthorizeJSONBody defines parameters for Authorize.
type AuthorizeJSONBody struct {
	Password string `json:"password"`
	UserId   string `json:"user_id"`
}

// ReauthorizeJSONBody defines parameters for Reauthorize.
type ReauthorizeJSONBody struct {
	RefreshToken string `json:"refresh_token"`
}

// CreateReservationJSONBody defines parameters for CreateReservation.
type CreateReservationJSONBody struct {
	BookerName   *string                                `json:"booker_name,omitempty"`
	CampusCode   CreateReservationJSONBodyCampusCode    `json:"campus_code"`
	Date         time.Time                              `json:"date"`
	Floors       *[]int                                 `json:"floors,omitempty"`
	FromHour     int                                    `json:"from_hour"`
	FromMinute   int                                    `json:"from_minute"`
	IsAutoSelect bool                                   `json:"is_auto_select"`
	IsBasement   *bool                                  `json:"is_basement,omitempty"`
	PianoNumbers *[]int                                 `json:"piano_numbers,omitempty"`
	PianoTypes   *[]CreateReservationJSONBodyPianoTypes `json:"piano_types,omitempty"`
	RoomId       *string                                `json:"room_id,omitempty"`
	ToHour       int                                    `json:"to_hour"`
	ToMinute     int                                    `json:"to_minute"`
}

// CreateReservationJSONBodyCampusCode defines parameters for CreateReservation.
type CreateReservationJSONBodyCampusCode string

// CreateReservationJSONBodyPianoTypes defines parameters for CreateReservation.
type CreateReservationJSONBodyPianoTypes string

// UpdateReservationJSONBody defines parameters for UpdateReservation.
type UpdateReservationJSONBody struct {
	BookerName   *string                                `json:"booker_name,omitempty"`
	CampusCode   UpdateReservationJSONBodyCampusCode    `json:"campus_code"`
	Date         time.Time                              `json:"date"`
	Floors       *[]int                                 `json:"floors,omitempty"`
	FromHour     int                                    `json:"from_hour"`
	FromMinute   string                                 `json:"from_minute"`
	IsAutoSelect bool                                   `json:"is_auto_select"`
	IsBasement   *bool                                  `json:"is_basement,omitempty"`
	PianoNumbers *[]int                                 `json:"piano_numbers,omitempty"`
	PianoTypes   *[]UpdateReservationJSONBodyPianoTypes `json:"piano_types,omitempty"`
	RoomId       *string                                `json:"room_id,omitempty"`
	ToHour       string                                 `json:"to_hour"`
	ToMinute     string                                 `json:"to_minute"`
}

// UpdateReservationJSONBodyCampusCode defines parameters for UpdateReservation.
type UpdateReservationJSONBodyCampusCode string

// UpdateReservationJSONBodyPianoTypes defines parameters for UpdateReservation.
type UpdateReservationJSONBodyPianoTypes string

// AuthorizeJSONRequestBody defines body for Authorize for application/json ContentType.
type AuthorizeJSONRequestBody AuthorizeJSONBody

// ReauthorizeJSONRequestBody defines body for Reauthorize for application/json ContentType.
type ReauthorizeJSONRequestBody ReauthorizeJSONBody

// CreateReservationJSONRequestBody defines body for CreateReservation for application/json ContentType.
type CreateReservationJSONRequestBody CreateReservationJSONBody

// UpdateReservationJSONRequestBody defines body for UpdateReservation for application/json ContentType.
type UpdateReservationJSONRequestBody UpdateReservationJSONBody

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = &http.Client{}
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// AuthorizeWithBody request with any body
	AuthorizeWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	Authorize(ctx context.Context, body AuthorizeJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ReauthorizeWithBody request with any body
	ReauthorizeWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	Reauthorize(ctx context.Context, body ReauthorizeJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateReservationWithBody request with any body
	CreateReservationWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateReservation(ctx context.Context, body CreateReservationJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetMyReservations request
	GetMyReservations(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetReservation request
	GetReservation(ctx context.Context, reservationId int, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteReservation request
	DeleteReservation(ctx context.Context, reservationId int, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateReservationWithBody request with any body
	UpdateReservationWithBody(ctx context.Context, reservationId int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UpdateReservation(ctx context.Context, reservationId int, body UpdateReservationJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetRooms request
	GetRooms(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)
}

func (c *Client) AuthorizeWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAuthorizeRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Authorize(ctx context.Context, body AuthorizeJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAuthorizeRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ReauthorizeWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewReauthorizeRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Reauthorize(ctx context.Context, body ReauthorizeJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewReauthorizeRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateReservationWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateReservationRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateReservation(ctx context.Context, body CreateReservationJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateReservationRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetMyReservations(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetMyReservationsRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetReservation(ctx context.Context, reservationId int, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetReservationRequest(c.Server, reservationId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteReservation(ctx context.Context, reservationId int, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteReservationRequest(c.Server, reservationId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateReservationWithBody(ctx context.Context, reservationId int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateReservationRequestWithBody(c.Server, reservationId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateReservation(ctx context.Context, reservationId int, body UpdateReservationJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateReservationRequest(c.Server, reservationId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetRooms(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetRoomsRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

// NewAuthorizeRequest calls the generic Authorize builder with application/json body
func NewAuthorizeRequest(server string, body AuthorizeJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewAuthorizeRequestWithBody(server, "application/json", bodyReader)
}

// NewAuthorizeRequestWithBody generates requests for Authorize with any type of body
func NewAuthorizeRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/authorize")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewReauthorizeRequest calls the generic Reauthorize builder with application/json body
func NewReauthorizeRequest(server string, body ReauthorizeJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewReauthorizeRequestWithBody(server, "application/json", bodyReader)
}

// NewReauthorizeRequestWithBody generates requests for Reauthorize with any type of body
func NewReauthorizeRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/authorize/refresh")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewCreateReservationRequest calls the generic CreateReservation builder with application/json body
func NewCreateReservationRequest(server string, body CreateReservationJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateReservationRequestWithBody(server, "application/json", bodyReader)
}

// NewCreateReservationRequestWithBody generates requests for CreateReservation with any type of body
func NewCreateReservationRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/reservations/create")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetMyReservationsRequest generates requests for GetMyReservations
func NewGetMyReservationsRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/reservations/mine")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetReservationRequest generates requests for GetReservation
func NewGetReservationRequest(server string, reservationId int) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "reservation_id", runtime.ParamLocationPath, reservationId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/reservations/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDeleteReservationRequest generates requests for DeleteReservation
func NewDeleteReservationRequest(server string, reservationId int) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "reservation_id", runtime.ParamLocationPath, reservationId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/reservations/%s/delete", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpdateReservationRequest calls the generic UpdateReservation builder with application/json body
func NewUpdateReservationRequest(server string, reservationId int, body UpdateReservationJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdateReservationRequestWithBody(server, reservationId, "application/json", bodyReader)
}

// NewUpdateReservationRequestWithBody generates requests for UpdateReservation with any type of body
func NewUpdateReservationRequestWithBody(server string, reservationId int, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "reservation_id", runtime.ParamLocationPath, reservationId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/reservations/%s/update", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetRoomsRequest generates requests for GetRooms
func NewGetRoomsRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/rooms")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

func (c *Client) applyEditors(ctx context.Context, req *http.Request, additionalEditors []RequestEditorFn) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// AuthorizeWithBodyWithResponse request with any body
	AuthorizeWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*AuthorizeResponse, error)

	AuthorizeWithResponse(ctx context.Context, body AuthorizeJSONRequestBody, reqEditors ...RequestEditorFn) (*AuthorizeResponse, error)

	// ReauthorizeWithBodyWithResponse request with any body
	ReauthorizeWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ReauthorizeResponse, error)

	ReauthorizeWithResponse(ctx context.Context, body ReauthorizeJSONRequestBody, reqEditors ...RequestEditorFn) (*ReauthorizeResponse, error)

	// CreateReservationWithBodyWithResponse request with any body
	CreateReservationWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateReservationResponse, error)

	CreateReservationWithResponse(ctx context.Context, body CreateReservationJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateReservationResponse, error)

	// GetMyReservationsWithResponse request
	GetMyReservationsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetMyReservationsResponse, error)

	// GetReservationWithResponse request
	GetReservationWithResponse(ctx context.Context, reservationId int, reqEditors ...RequestEditorFn) (*GetReservationResponse, error)

	// DeleteReservationWithResponse request
	DeleteReservationWithResponse(ctx context.Context, reservationId int, reqEditors ...RequestEditorFn) (*DeleteReservationResponse, error)

	// UpdateReservationWithBodyWithResponse request with any body
	UpdateReservationWithBodyWithResponse(ctx context.Context, reservationId int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateReservationResponse, error)

	UpdateReservationWithResponse(ctx context.Context, reservationId int, body UpdateReservationJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateReservationResponse, error)

	// GetRoomsWithResponse request
	GetRoomsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetRoomsResponse, error)
}

type AuthorizeResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Code int           `json:"code"`
		Data Authorization `json:"data"`
		Ok   bool          `json:"ok"`
	}
}

// Status returns HTTPResponse.Status
func (r AuthorizeResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AuthorizeResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ReauthorizeResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Code int           `json:"code"`
		Data Authorization `json:"data"`
		Ok   bool          `json:"ok"`
	}
}

// Status returns HTTPResponse.Status
func (r ReauthorizeResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ReauthorizeResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateReservationResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Code int         `json:"code"`
		Data Reservation `json:"data"`
		Ok   bool        `json:"ok"`
	}
}

// Status returns HTTPResponse.Status
func (r CreateReservationResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateReservationResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetMyReservationsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Code int             `json:"code"`
		Data ReservationList `json:"data"`
		Ok   bool            `json:"ok"`
	}
}

// Status returns HTTPResponse.Status
func (r GetMyReservationsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetMyReservationsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetReservationResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Code int         `json:"code"`
		Data Reservation `json:"data"`
		Ok   bool        `json:"ok"`
	}
}

// Status returns HTTPResponse.Status
func (r GetReservationResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetReservationResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteReservationResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Response
}

// Status returns HTTPResponse.Status
func (r DeleteReservationResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteReservationResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateReservationResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Response
}

// Status returns HTTPResponse.Status
func (r UpdateReservationResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateReservationResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetRoomsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Code int      `json:"code"`
		Data RoomList `json:"data"`
		Ok   bool     `json:"ok"`
	}
}

// Status returns HTTPResponse.Status
func (r GetRoomsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetRoomsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// AuthorizeWithBodyWithResponse request with arbitrary body returning *AuthorizeResponse
func (c *ClientWithResponses) AuthorizeWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*AuthorizeResponse, error) {
	rsp, err := c.AuthorizeWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAuthorizeResponse(rsp)
}

func (c *ClientWithResponses) AuthorizeWithResponse(ctx context.Context, body AuthorizeJSONRequestBody, reqEditors ...RequestEditorFn) (*AuthorizeResponse, error) {
	rsp, err := c.Authorize(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAuthorizeResponse(rsp)
}

// ReauthorizeWithBodyWithResponse request with arbitrary body returning *ReauthorizeResponse
func (c *ClientWithResponses) ReauthorizeWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ReauthorizeResponse, error) {
	rsp, err := c.ReauthorizeWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseReauthorizeResponse(rsp)
}

func (c *ClientWithResponses) ReauthorizeWithResponse(ctx context.Context, body ReauthorizeJSONRequestBody, reqEditors ...RequestEditorFn) (*ReauthorizeResponse, error) {
	rsp, err := c.Reauthorize(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseReauthorizeResponse(rsp)
}

// CreateReservationWithBodyWithResponse request with arbitrary body returning *CreateReservationResponse
func (c *ClientWithResponses) CreateReservationWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateReservationResponse, error) {
	rsp, err := c.CreateReservationWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateReservationResponse(rsp)
}

func (c *ClientWithResponses) CreateReservationWithResponse(ctx context.Context, body CreateReservationJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateReservationResponse, error) {
	rsp, err := c.CreateReservation(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateReservationResponse(rsp)
}

// GetMyReservationsWithResponse request returning *GetMyReservationsResponse
func (c *ClientWithResponses) GetMyReservationsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetMyReservationsResponse, error) {
	rsp, err := c.GetMyReservations(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetMyReservationsResponse(rsp)
}

// GetReservationWithResponse request returning *GetReservationResponse
func (c *ClientWithResponses) GetReservationWithResponse(ctx context.Context, reservationId int, reqEditors ...RequestEditorFn) (*GetReservationResponse, error) {
	rsp, err := c.GetReservation(ctx, reservationId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetReservationResponse(rsp)
}

// DeleteReservationWithResponse request returning *DeleteReservationResponse
func (c *ClientWithResponses) DeleteReservationWithResponse(ctx context.Context, reservationId int, reqEditors ...RequestEditorFn) (*DeleteReservationResponse, error) {
	rsp, err := c.DeleteReservation(ctx, reservationId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteReservationResponse(rsp)
}

// UpdateReservationWithBodyWithResponse request with arbitrary body returning *UpdateReservationResponse
func (c *ClientWithResponses) UpdateReservationWithBodyWithResponse(ctx context.Context, reservationId int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateReservationResponse, error) {
	rsp, err := c.UpdateReservationWithBody(ctx, reservationId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateReservationResponse(rsp)
}

func (c *ClientWithResponses) UpdateReservationWithResponse(ctx context.Context, reservationId int, body UpdateReservationJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateReservationResponse, error) {
	rsp, err := c.UpdateReservation(ctx, reservationId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateReservationResponse(rsp)
}

// GetRoomsWithResponse request returning *GetRoomsResponse
func (c *ClientWithResponses) GetRoomsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetRoomsResponse, error) {
	rsp, err := c.GetRooms(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetRoomsResponse(rsp)
}

// ParseAuthorizeResponse parses an HTTP response from a AuthorizeWithResponse call
func ParseAuthorizeResponse(rsp *http.Response) (*AuthorizeResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AuthorizeResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Code int           `json:"code"`
			Data Authorization `json:"data"`
			Ok   bool          `json:"ok"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseReauthorizeResponse parses an HTTP response from a ReauthorizeWithResponse call
func ParseReauthorizeResponse(rsp *http.Response) (*ReauthorizeResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ReauthorizeResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Code int           `json:"code"`
			Data Authorization `json:"data"`
			Ok   bool          `json:"ok"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseCreateReservationResponse parses an HTTP response from a CreateReservationWithResponse call
func ParseCreateReservationResponse(rsp *http.Response) (*CreateReservationResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateReservationResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Code int         `json:"code"`
			Data Reservation `json:"data"`
			Ok   bool        `json:"ok"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetMyReservationsResponse parses an HTTP response from a GetMyReservationsWithResponse call
func ParseGetMyReservationsResponse(rsp *http.Response) (*GetMyReservationsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetMyReservationsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Code int             `json:"code"`
			Data ReservationList `json:"data"`
			Ok   bool            `json:"ok"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetReservationResponse parses an HTTP response from a GetReservationWithResponse call
func ParseGetReservationResponse(rsp *http.Response) (*GetReservationResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetReservationResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Code int         `json:"code"`
			Data Reservation `json:"data"`
			Ok   bool        `json:"ok"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseDeleteReservationResponse parses an HTTP response from a DeleteReservationWithResponse call
func ParseDeleteReservationResponse(rsp *http.Response) (*DeleteReservationResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteReservationResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Response
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseUpdateReservationResponse parses an HTTP response from a UpdateReservationWithResponse call
func ParseUpdateReservationResponse(rsp *http.Response) (*UpdateReservationResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdateReservationResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Response
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetRoomsResponse parses an HTTP response from a GetRoomsWithResponse call
func ParseGetRoomsResponse(rsp *http.Response) (*GetRoomsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetRoomsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Code int      `json:"code"`
			Data RoomList `json:"data"`
			Ok   bool     `json:"ok"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// 認証
	// (POST /authorize)
	Authorize(ctx echo.Context) error
	// 再認証
	// (POST /authorize/refresh)
	Reauthorize(ctx echo.Context) error
	// 予約の作成
	// (POST /reservations/create)
	CreateReservation(ctx echo.Context) error
	// 自分の予約を取得
	// (GET /reservations/mine)
	GetMyReservations(ctx echo.Context) error
	// 予約の取得
	// (GET /reservations/{reservation_id})
	GetReservation(ctx echo.Context, reservationId int) error
	// 予約の削除
	// (DELETE /reservations/{reservation_id}/delete)
	DeleteReservation(ctx echo.Context, reservationId int) error
	// 予約の更新
	// (PUT /reservations/{reservation_id}/update)
	UpdateReservation(ctx echo.Context, reservationId int) error
	// 練習室の取得
	// (GET /rooms)
	GetRooms(ctx echo.Context) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// Authorize converts echo context to params.
func (w *ServerInterfaceWrapper) Authorize(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.Authorize(ctx)
	return err
}

// Reauthorize converts echo context to params.
func (w *ServerInterfaceWrapper) Reauthorize(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.Reauthorize(ctx)
	return err
}

// CreateReservation converts echo context to params.
func (w *ServerInterfaceWrapper) CreateReservation(ctx echo.Context) error {
	var err error

	ctx.Set(BearerScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.CreateReservation(ctx)
	return err
}

// GetMyReservations converts echo context to params.
func (w *ServerInterfaceWrapper) GetMyReservations(ctx echo.Context) error {
	var err error

	ctx.Set(BearerScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetMyReservations(ctx)
	return err
}

// GetReservation converts echo context to params.
func (w *ServerInterfaceWrapper) GetReservation(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "reservation_id" -------------
	var reservationId int

	err = runtime.BindStyledParameterWithOptions("simple", "reservation_id", ctx.Param("reservation_id"), &reservationId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter reservation_id: %s", err))
	}

	ctx.Set(BearerScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetReservation(ctx, reservationId)
	return err
}

// DeleteReservation converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteReservation(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "reservation_id" -------------
	var reservationId int

	err = runtime.BindStyledParameterWithOptions("simple", "reservation_id", ctx.Param("reservation_id"), &reservationId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter reservation_id: %s", err))
	}

	ctx.Set(BearerScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.DeleteReservation(ctx, reservationId)
	return err
}

// UpdateReservation converts echo context to params.
func (w *ServerInterfaceWrapper) UpdateReservation(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "reservation_id" -------------
	var reservationId int

	err = runtime.BindStyledParameterWithOptions("simple", "reservation_id", ctx.Param("reservation_id"), &reservationId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter reservation_id: %s", err))
	}

	ctx.Set(BearerScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.UpdateReservation(ctx, reservationId)
	return err
}

// GetRooms converts echo context to params.
func (w *ServerInterfaceWrapper) GetRooms(ctx echo.Context) error {
	var err error

	ctx.Set(BearerScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetRooms(ctx)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.POST(baseURL+"/authorize", wrapper.Authorize)
	router.POST(baseURL+"/authorize/refresh", wrapper.Reauthorize)
	router.POST(baseURL+"/reservations/create", wrapper.CreateReservation)
	router.GET(baseURL+"/reservations/mine", wrapper.GetMyReservations)
	router.GET(baseURL+"/reservations/:reservation_id", wrapper.GetReservation)
	router.DELETE(baseURL+"/reservations/:reservation_id/delete", wrapper.DeleteReservation)
	router.PUT(baseURL+"/reservations/:reservation_id/update", wrapper.UpdateReservation)
	router.GET(baseURL+"/rooms", wrapper.GetRooms)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+xYS28jRRD+LwXHIfYuN994SAgJLkGcomjUninbvXE/trsnYCIfQGgJSCvQHhYhOO4B",
	"7WHFIRIS4vFjWCfhX6DpHme6PT12RmtFXsm38VR1VfVXr89zBplgUnDkRsPgDHQ2QUbs4zuFmQhFvyCG",
	"Cl6+kEpIVIaiFZMsQ61TI07QSs1MIgxAG0X5GOYJKBwp1JNWDavysKAKcxgchfZWTx8ny9Ni+AAzU9o/",
	"RI3qtCW6oRAnqFJOGEaDywiThU4zkVs58oKVQdyDBO573rwDConBPCWm1B8JxconyInBtwxlCJEzpfD2",
	"2vi5QcXJNKV5NOSREiydiEJ5UsoNjlHdiBnlhcG4QmDWe6+EYG0+jVjj0Yg1/layS3MIQa/Qqd37Fwxv",
	"U4fh+wxSsqE+PqLaNGtE1Qr2NzXI7MObCkcwgDd6dW/0qsbo+VU3v/FKlCKzxqUDBy0hSsE1NmNbFmYT",
	"9ZwY4klqY+LEez0UYoqEN0ISJ1CZSJyPaFhCsEhIXVtmNBXCLx1esGGkFOsDVKdDopEhN7GrWIVsSrRW",
	"VYBNjdaGl5RwkVYhRIF1Gu59fb2xIrwszkIqOp4YSIALjpH7rgBtA0lc3Qe+A0crVwohWG0Yh2dbwlpq",
	"XAjWobjLIDZWtTXZDGOegMasUNTMPintVYMYiXKIWyc2Xe7VjYGJMRLm5XnKR8Imh5ppKTEZU/oUEjhF",
	"pe2ch3sH/YO+LXeJnEgKA3j7oH9QVqEkZmJ99ki1ulxjCQdMCYvtxQ9zGNxsNzuC8GGB2rwr8pnrPW6q",
	"EiRSTmlmT/UeaLdoHFhNqCXR+jOh4qVdaFTxIbuC7lIxqe1FoHan3PCwzu/3+68Q+uZps65qQqLQaRLV",
	"q4BEr5lAjjpTVLotD0GVweDoOAFdMEbUDAZw/fzx9a9/WpW6AnoVkWivhEMkW6+FjtxnE9nZ5zuW78Wj",
	"x37K/W3bc9ygPenvWbm/zLeV+q0zz24s0i6JcOJHmFsw37dALXVKCiNSjdMykW27e/1y97dk1wvUKzU8",
	"2XmLN03fCT2OMuOufHglC7s+RlaY9N0NkZqUHB3Pg4ny8o/zq4uv//3yxcu/frk8/yEyVxjl9spjjAyV",
	"D9B8PDv0Sf9uwm2p4o5Afv3N88X5oxJyh/1XTxbfP138/WME+zPvV0rz+bo8hJNdEkUYGjtXjs6AliGW",
	"bBGWfxggNA0+BEYVmHhJabTy8b6pbtVUt05sL8cpurlZP4Upft++f52yvCFr7jvAloD+9rv/fnp2G6AL",
	"uWQXsog00qdWfOco72lYBxoWfD7Zs7CmrBWx15SD3eEgufz54vLpb9UgWX5Jal25VmGXduHyq9iOLMKr",
	"3y+u/nmyePHM34Xz+f8BAAD//3nHNvODGQAA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
