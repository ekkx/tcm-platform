// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0

package database

import (
	"database/sql/driver"
	"fmt"
	"time"

	"github.com/ekkx/tcmrsv-web/server/pkg/ulid"
)

type CampusType string

const (
	CampusTypeNakameguro CampusType = "nakameguro"
	CampusTypeIkebukuro  CampusType = "ikebukuro"
)

func (e *CampusType) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = CampusType(s)
	case string:
		*e = CampusType(s)
	default:
		return fmt.Errorf("unsupported scan type for CampusType: %T", src)
	}
	return nil
}

type NullCampusType struct {
	CampusType CampusType `json:"campus_type"`
	Valid      bool       `json:"valid"` // Valid is true if CampusType is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullCampusType) Scan(value interface{}) error {
	if value == nil {
		ns.CampusType, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.CampusType.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullCampusType) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.CampusType), nil
}

type Reservation struct {
	ID         ulid.ULID  `json:"id"`
	ExternalID *string    `json:"external_id"`
	UserID     ulid.ULID  `json:"user_id"`
	CampusType CampusType `json:"campus_type"`
	RoomID     string     `json:"room_id"`
	Date       time.Time  `json:"date"`
	FromHour   int32      `json:"from_hour"`
	FromMinute int32      `json:"from_minute"`
	ToHour     int32      `json:"to_hour"`
	ToMinute   int32      `json:"to_minute"`
	CreateTime time.Time  `json:"create_time"`
}

type User struct {
	ID                ulid.ULID  `json:"id"`
	DisplayName       string     `json:"display_name"`
	MasterUserID      *ulid.ULID `json:"master_user_id"`
	EncryptedPassword string     `json:"encrypted_password"`
	CreateTime        time.Time  `json:"create_time"`
}
