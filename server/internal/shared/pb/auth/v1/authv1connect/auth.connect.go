// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: auth/v1/auth.proto

package authv1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "github.com/ekkx/tcmrsv-web/server/internal/shared/pb/auth/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// AuthServiceName is the fully-qualified name of the AuthService service.
	AuthServiceName = "auth.v1.AuthService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// AuthServiceAuthorizeProcedure is the fully-qualified name of the AuthService's Authorize RPC.
	AuthServiceAuthorizeProcedure = "/auth.v1.AuthService/Authorize"
	// AuthServiceReauthorizeProcedure is the fully-qualified name of the AuthService's Reauthorize RPC.
	AuthServiceReauthorizeProcedure = "/auth.v1.AuthService/Reauthorize"
	// AuthServiceUpdatePasswordProcedure is the fully-qualified name of the AuthService's
	// UpdatePassword RPC.
	AuthServiceUpdatePasswordProcedure = "/auth.v1.AuthService/UpdatePassword"
)

// AuthServiceClient is a client for the auth.v1.AuthService service.
type AuthServiceClient interface {
	Authorize(context.Context, *connect.Request[v1.AuthorizeRequest]) (*connect.Response[v1.AuthorizeResponse], error)
	Reauthorize(context.Context, *connect.Request[v1.ReauthorizeRequest]) (*connect.Response[v1.ReauthorizeResponse], error)
	UpdatePassword(context.Context, *connect.Request[v1.UpdatePasswordRequest]) (*connect.Response[v1.UpdatePasswordResponse], error)
}

// NewAuthServiceClient constructs a client for the auth.v1.AuthService service. By default, it uses
// the Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and sends
// uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or
// connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewAuthServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) AuthServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	authServiceMethods := v1.File_auth_v1_auth_proto.Services().ByName("AuthService").Methods()
	return &authServiceClient{
		authorize: connect.NewClient[v1.AuthorizeRequest, v1.AuthorizeResponse](
			httpClient,
			baseURL+AuthServiceAuthorizeProcedure,
			connect.WithSchema(authServiceMethods.ByName("Authorize")),
			connect.WithClientOptions(opts...),
		),
		reauthorize: connect.NewClient[v1.ReauthorizeRequest, v1.ReauthorizeResponse](
			httpClient,
			baseURL+AuthServiceReauthorizeProcedure,
			connect.WithSchema(authServiceMethods.ByName("Reauthorize")),
			connect.WithClientOptions(opts...),
		),
		updatePassword: connect.NewClient[v1.UpdatePasswordRequest, v1.UpdatePasswordResponse](
			httpClient,
			baseURL+AuthServiceUpdatePasswordProcedure,
			connect.WithSchema(authServiceMethods.ByName("UpdatePassword")),
			connect.WithClientOptions(opts...),
		),
	}
}

// authServiceClient implements AuthServiceClient.
type authServiceClient struct {
	authorize      *connect.Client[v1.AuthorizeRequest, v1.AuthorizeResponse]
	reauthorize    *connect.Client[v1.ReauthorizeRequest, v1.ReauthorizeResponse]
	updatePassword *connect.Client[v1.UpdatePasswordRequest, v1.UpdatePasswordResponse]
}

// Authorize calls auth.v1.AuthService.Authorize.
func (c *authServiceClient) Authorize(ctx context.Context, req *connect.Request[v1.AuthorizeRequest]) (*connect.Response[v1.AuthorizeResponse], error) {
	return c.authorize.CallUnary(ctx, req)
}

// Reauthorize calls auth.v1.AuthService.Reauthorize.
func (c *authServiceClient) Reauthorize(ctx context.Context, req *connect.Request[v1.ReauthorizeRequest]) (*connect.Response[v1.ReauthorizeResponse], error) {
	return c.reauthorize.CallUnary(ctx, req)
}

// UpdatePassword calls auth.v1.AuthService.UpdatePassword.
func (c *authServiceClient) UpdatePassword(ctx context.Context, req *connect.Request[v1.UpdatePasswordRequest]) (*connect.Response[v1.UpdatePasswordResponse], error) {
	return c.updatePassword.CallUnary(ctx, req)
}

// AuthServiceHandler is an implementation of the auth.v1.AuthService service.
type AuthServiceHandler interface {
	Authorize(context.Context, *connect.Request[v1.AuthorizeRequest]) (*connect.Response[v1.AuthorizeResponse], error)
	Reauthorize(context.Context, *connect.Request[v1.ReauthorizeRequest]) (*connect.Response[v1.ReauthorizeResponse], error)
	UpdatePassword(context.Context, *connect.Request[v1.UpdatePasswordRequest]) (*connect.Response[v1.UpdatePasswordResponse], error)
}

// NewAuthServiceHandler builds an HTTP handler from the service implementation. It returns the path
// on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewAuthServiceHandler(svc AuthServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	authServiceMethods := v1.File_auth_v1_auth_proto.Services().ByName("AuthService").Methods()
	authServiceAuthorizeHandler := connect.NewUnaryHandler(
		AuthServiceAuthorizeProcedure,
		svc.Authorize,
		connect.WithSchema(authServiceMethods.ByName("Authorize")),
		connect.WithHandlerOptions(opts...),
	)
	authServiceReauthorizeHandler := connect.NewUnaryHandler(
		AuthServiceReauthorizeProcedure,
		svc.Reauthorize,
		connect.WithSchema(authServiceMethods.ByName("Reauthorize")),
		connect.WithHandlerOptions(opts...),
	)
	authServiceUpdatePasswordHandler := connect.NewUnaryHandler(
		AuthServiceUpdatePasswordProcedure,
		svc.UpdatePassword,
		connect.WithSchema(authServiceMethods.ByName("UpdatePassword")),
		connect.WithHandlerOptions(opts...),
	)
	return "/auth.v1.AuthService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case AuthServiceAuthorizeProcedure:
			authServiceAuthorizeHandler.ServeHTTP(w, r)
		case AuthServiceReauthorizeProcedure:
			authServiceReauthorizeHandler.ServeHTTP(w, r)
		case AuthServiceUpdatePasswordProcedure:
			authServiceUpdatePasswordHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedAuthServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedAuthServiceHandler struct{}

func (UnimplementedAuthServiceHandler) Authorize(context.Context, *connect.Request[v1.AuthorizeRequest]) (*connect.Response[v1.AuthorizeResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("auth.v1.AuthService.Authorize is not implemented"))
}

func (UnimplementedAuthServiceHandler) Reauthorize(context.Context, *connect.Request[v1.ReauthorizeRequest]) (*connect.Response[v1.ReauthorizeResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("auth.v1.AuthService.Reauthorize is not implemented"))
}

func (UnimplementedAuthServiceHandler) UpdatePassword(context.Context, *connect.Request[v1.UpdatePasswordRequest]) (*connect.Response[v1.UpdatePasswordResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("auth.v1.AuthService.UpdatePassword is not implemented"))
}
