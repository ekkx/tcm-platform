// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: create_reservation.sql

package db

import (
	"context"
	"time"
)

const createReservation = `-- name: CreateReservation :one
INSERT INTO
    reservations (
        user_id,
        campus,
        room_id,
        date,
        from_hour,
        from_minute,
        to_hour,
        to_minute,
        booker_name
    )
VALUES
    (
        $1::text,
        $2::campus,
        $3::text,
        $4::timestamptz,
        $5::int,
        $6::int,
        $7::int,
        $8::int,
        $9::text
    )
RETURNING
    reservations.id, reservations.external_id, reservations.user_id, reservations.campus, reservations.room_id, reservations.date, reservations.from_hour, reservations.from_minute, reservations.to_hour, reservations.to_minute, reservations.booker_name, reservations.created_at
`

type CreateReservationParams struct {
	UserID     string    `json:"user_id"`
	Campus     Campus    `json:"campus"`
	RoomID     string    `json:"room_id"`
	Date       time.Time `json:"date"`
	FromHour   int32     `json:"from_hour"`
	FromMinute int32     `json:"from_minute"`
	ToHour     int32     `json:"to_hour"`
	ToMinute   int32     `json:"to_minute"`
	BookerName *string   `json:"booker_name"`
}

func (q *Queries) CreateReservation(ctx context.Context, arg CreateReservationParams) (Reservation, error) {
	row := q.db.QueryRow(ctx, createReservation,
		arg.UserID,
		arg.Campus,
		arg.RoomID,
		arg.Date,
		arg.FromHour,
		arg.FromMinute,
		arg.ToHour,
		arg.ToMinute,
		arg.BookerName,
	)
	var i Reservation
	err := row.Scan(
		&i.ID,
		&i.ExternalID,
		&i.UserID,
		&i.Campus,
		&i.RoomID,
		&i.Date,
		&i.FromHour,
		&i.FromMinute,
		&i.ToHour,
		&i.ToMinute,
		&i.BookerName,
		&i.CreatedAt,
	)
	return i, err
}
