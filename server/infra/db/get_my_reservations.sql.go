// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: get_my_reservations.sql

package db

import (
	"context"
	"time"
)

const getMyReservations = `-- name: GetMyReservations :many
SELECT
    reservations.id, reservations.external_id, reservations.user_id, reservations.campus, reservations.room_id, reservations.date, reservations.from_hour, reservations.from_minute, reservations.to_hour, reservations.to_minute, reservations.booker_name, reservations.created_at
FROM
    reservations
WHERE
    reservations.user_id = $1::text
    AND reservations.date >= $2::timestamptz
`

type GetMyReservationsParams struct {
	UserID string    `json:"user_id"`
	Date   time.Time `json:"date"`
}

func (q *Queries) GetMyReservations(ctx context.Context, arg GetMyReservationsParams) ([]Reservation, error) {
	rows, err := q.db.Query(ctx, getMyReservations, arg.UserID, arg.Date)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Reservation{}
	for rows.Next() {
		var i Reservation
		if err := rows.Scan(
			&i.ID,
			&i.ExternalID,
			&i.UserID,
			&i.Campus,
			&i.RoomID,
			&i.Date,
			&i.FromHour,
			&i.FromMinute,
			&i.ToHour,
			&i.ToMinute,
			&i.BookerName,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
