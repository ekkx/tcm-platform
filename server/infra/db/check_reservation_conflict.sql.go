// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: check_reservation_conflict.sql

package db

import (
	"context"
	"time"
)

const checkReservationConflict = `-- name: CheckReservationConflict :one
SELECT EXISTS (
  SELECT
    1
  FROM
    reservations
  WHERE
    room_id = $1
    AND date = $2::timestamptz
    AND (
      (($3* 60) + $4) < ((to_hour * 60) + to_minute)
      AND (($5* 60) + $6) > ((from_hour * 60) + from_minute)
    )
) AS conflict
`

type CheckReservationConflictParams struct {
	RoomID     string    `json:"room_id"`
	Date       time.Time `json:"date"`
	FromHour   *int32    `json:"*from_hour"`
	FromMinute *int32    `json:"from_minute"`
	ToHour     *int32    `json:"*to_hour"`
	ToMinute   *int32    `json:"to_minute"`
}

func (q *Queries) CheckReservationConflict(ctx context.Context, arg CheckReservationConflictParams) (bool, error) {
	row := q.db.QueryRow(ctx, checkReservationConflict,
		arg.RoomID,
		arg.Date,
		arg.FromHour,
		arg.FromMinute,
		arg.ToHour,
		arg.ToMinute,
	)
	var conflict bool
	err := row.Scan(&conflict)
	return conflict, err
}
