// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: room/v1/room.proto

package roomv1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "github.com/ekkx/tcmrsv-web/internal/shared/pb/room/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// RoomServiceName is the fully-qualified name of the RoomService service.
	RoomServiceName = "room.v1.RoomService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// RoomServiceListAvailableRoomsProcedure is the fully-qualified name of the RoomService's
	// ListAvailableRooms RPC.
	RoomServiceListAvailableRoomsProcedure = "/room.v1.RoomService/ListAvailableRooms"
)

// RoomServiceClient is a client for the room.v1.RoomService service.
type RoomServiceClient interface {
	ListAvailableRooms(context.Context, *connect.Request[v1.ListAvailableRoomsRequest]) (*connect.Response[v1.ListAvailableRoomsResponse], error)
}

// NewRoomServiceClient constructs a client for the room.v1.RoomService service. By default, it uses
// the Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and sends
// uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or
// connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewRoomServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) RoomServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	roomServiceMethods := v1.File_room_v1_room_proto.Services().ByName("RoomService").Methods()
	return &roomServiceClient{
		listAvailableRooms: connect.NewClient[v1.ListAvailableRoomsRequest, v1.ListAvailableRoomsResponse](
			httpClient,
			baseURL+RoomServiceListAvailableRoomsProcedure,
			connect.WithSchema(roomServiceMethods.ByName("ListAvailableRooms")),
			connect.WithClientOptions(opts...),
		),
	}
}

// roomServiceClient implements RoomServiceClient.
type roomServiceClient struct {
	listAvailableRooms *connect.Client[v1.ListAvailableRoomsRequest, v1.ListAvailableRoomsResponse]
}

// ListAvailableRooms calls room.v1.RoomService.ListAvailableRooms.
func (c *roomServiceClient) ListAvailableRooms(ctx context.Context, req *connect.Request[v1.ListAvailableRoomsRequest]) (*connect.Response[v1.ListAvailableRoomsResponse], error) {
	return c.listAvailableRooms.CallUnary(ctx, req)
}

// RoomServiceHandler is an implementation of the room.v1.RoomService service.
type RoomServiceHandler interface {
	ListAvailableRooms(context.Context, *connect.Request[v1.ListAvailableRoomsRequest]) (*connect.Response[v1.ListAvailableRoomsResponse], error)
}

// NewRoomServiceHandler builds an HTTP handler from the service implementation. It returns the path
// on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewRoomServiceHandler(svc RoomServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	roomServiceMethods := v1.File_room_v1_room_proto.Services().ByName("RoomService").Methods()
	roomServiceListAvailableRoomsHandler := connect.NewUnaryHandler(
		RoomServiceListAvailableRoomsProcedure,
		svc.ListAvailableRooms,
		connect.WithSchema(roomServiceMethods.ByName("ListAvailableRooms")),
		connect.WithHandlerOptions(opts...),
	)
	return "/room.v1.RoomService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case RoomServiceListAvailableRoomsProcedure:
			roomServiceListAvailableRoomsHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedRoomServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedRoomServiceHandler struct{}

func (UnimplementedRoomServiceHandler) ListAvailableRooms(context.Context, *connect.Request[v1.ListAvailableRoomsRequest]) (*connect.Response[v1.ListAvailableRoomsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("room.v1.RoomService.ListAvailableRooms is not implemented"))
}
